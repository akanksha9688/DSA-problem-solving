#User function Template for python3

#Complete this function
#Function to find maximum circular subarray sum.
def circularSubarraySum(arr):
    ##Your code here
    n = len(arr)
    
    # Helper function to use Kadane's algorithm
    def kadane(nums):
        max_ending_here = max_so_far = nums[0]
        for x in nums[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far
    
    # Case 1: Maximum sum without wrapping
    max_kadane = kadane(arr)
    
    # Case 2: Maximum sum with wrapping
    total_sum = sum(arr)
    # Invert the array to find the minimum subarray sum
    inverted_array = [-x for x in arr]
    min_kadane = kadane(inverted_array)
    max_wrap = total_sum + min_kadane  # max_wrap = total_sum - (-min_subarray_sum)
    
    # If all elements are negative, max_wrap will be 0; in that case, return max_kadane
    if max_wrap == 0:
        return max_kadane
    
    return max(max_kadane, max_wrap)
